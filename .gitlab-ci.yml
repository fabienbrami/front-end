stages:
  - test
  - build
  - release
  - deploy
  
cache:
  paths:
  - node_modules/

Build:
  stage: build
  image: alpine:latest
  tags:
    - node
  before_script: 
    - yarn config set cache-folder .yarn
    - yarn install 
  script:
    - npm run build

Test:
  stage: test
  image: alpine:latest
  tags:
  - node
  before_script: 
    - yarn config set cache-folder .yarn
    - yarn install --frozen-lockfile
  script:
  # Installs Chrome
    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub |  apt-key add -
    - echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' |  tee /etc/apt/sources.list.d/google-chrome.list
    - apt-get update 
    - apt-get install google-chrome-stable -y
  # Runs the tests.
    - npm run test:karma-headless

release:
  stage: release
  image: docker:latest
  script:
    - cd ${APP_PATH}/release
    - docker login -u ${DOCKERUSERNAME} -p ${DOCKERTOKEN} ${CI_REGISTRY}
    - docker build -t ${CONTAINER_IMAGE} .
    - docker tag ${CONTAINER_IMAGE}:1.1.$CI_BUILD_ID ${CONTAINER_IMAGE}:latest
    - docker push ${CONTAINER_IMAGE}:1.1.$CI_BUILD_ID
    - docker push ${CONTAINER_IMAGE}:latest

deploy_staging:
  stage: deploy
  image: lwolf/helm-kubectl-docker:v152_213
  before_script:
    - mkdir -p /etc/deploy
    - echo ${KUBECONFIG} | base64 -d > ${KUBECONFIG}
    - kubectl config set-context $(kubectl config current-context) --namespace=socks-shop
  script:
    - kubectl set image deployment.apps/front-end front-end=${CONTAINER_IMAGE} --record
  only:
  - master
