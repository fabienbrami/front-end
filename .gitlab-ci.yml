variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_TLS_CERTDIR: ""
  KUBECONFIG: /etc/deploy/config
  
stages:
  - test
  - build
  - release
  - deploy
  - deploy_anthos

cache:
  paths:
  - node_modules/
  - .yarn

Test:
  stage: test
  image: node:9.4.0
  tags:
  - node
  before_script: 
    - apt-get update -qq && apt-get install -qy libelf1
    - export PATH=$HOME/.yarn/bin:$PATH
    - yarn config set cache-folder .yarn
    - yarn install --frozen-lockfile
  script:
     - hostname
     - NODE_ENV=dev npm install
     - PORT=8079 npm test

release:
  stage: release
  services: 
    - docker:19.03.0-dind
  image: docker:19.03.0
  script:
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} ${CI_REGISTRY}
    - docker build -t ${CONTAINER_IMAGE} .
    - docker tag ${CONTAINER_IMAGE} ${CONTAINER_IMAGE}:latest
    - docker tag ${CONTAINER_IMAGE} ${CONTAINER_IMAGE}:1.1.$CI_PIPELINE_IID
#    - sleep 100
    - docker push ${CONTAINER_IMAGE}:1.1.$CI_PIPELINE_IID
    - docker push ${CONTAINER_IMAGE}:latest

deploy:
  stage: deploy
  image: dtzar/helm-kubectl
  before_script:
    - mkdir -p /etc/deploy
    - echo ${kube_config_ga} | base64 -d > ${KUBECONFIG}
    - kubectl config set-context $(kubectl config current-context) --namespace=socks-shop
  script:
#    - sleep 1000
    - kubectl set image deployment.apps/front-end front-end=${CONTAINER_IMAGE}:1.1.$CI_PIPELINE_IID --record
  only:
  - master
  
deploy_anthos:
  stage: deploy_anthos
  image: dtzar/helm-kubectl
  before_script:
    - mkdir -p /etc/deploy
    - echo ${anthos} | base64 -d > ${KUBECONFIG}
    - kubectl config set-context $(kubectl config current-context) --namespace=socks-shop
  script:
    - deployment=`kubectl get pods |grep front`
    - sleep 1000
    - if [ -z "$deployment" ]; then kubectly apply -f deployment/front-end2.yaml; else kubectl set image deployment.apps/front-end front-end=${CONTAINER_IMAGE}:1.1.$CI_PIPELINE_IID --record;fi
  only:
  - master
